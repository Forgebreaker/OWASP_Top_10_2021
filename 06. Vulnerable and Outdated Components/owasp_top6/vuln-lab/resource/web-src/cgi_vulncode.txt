// Function declaration. It returns an integer and takes a char array 'path' and an unsigned integer 'flags' as parameters.

AP_DECLARE(int) ap_normalize_path(char *path, unsigned int flags) // unsigned int is an integer that can only hold non-negative values
{
    int ret = 1;

    // Check flags to see if unreserved characters should be decoded. The result is stored in 'decode_unreserved'.
    
    int decode_unreserved = (flags & AP_NORMALIZE_DECODE_UNRESERVED) != 0;

/*
Flags are used in computer programming and web development to control responses and access methods to APIs. 
AP_NORMALIZE_DECODE_UNRESERVED is a flag that can be used in requests to the Google Developers Platform for web APIs. 
It signals to the server to normalize and decode the URL parameters to their default values before passing them to the handler.
*/

    if (!IS_SLASH(path[0])) { 
        
        // Since I don't have the full source code, so this is my logic in this case http://www.example.com/example%20path
        // path = /example%20path

        for (int l = 0; path[l]; l++) { 

            if ((flags & AP_NORMALIZE_DECODE_UNRESERVED) && path[l] == '%' && apr_isxdigit(path[l + 1]) && apr_isxdigit(path[l + 2])) {
                
                // Convert the two hexadecimal digits to their character representation.
                const char c = x2c(&path[l + 1]); 
                
                // /example%20path to /example path
                
                continue;
            }
            if (path[l + 1] == '.' && IS_SLASH_OR_NUL(path[l + 2])) {
                
                ...

                // Skip the next two characters, as they are part of the './' or '../' sequence.
                
                l += 2;

                // If there's another character after the sequence, increment 'l' again to skip it.
                
                if (path[l]) {
                    l++;
                }
            }
        }
    }

    return ret;
}

